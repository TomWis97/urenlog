#!/usr/bin/env python3
import configparser
import argparse
import sys
import os
import argcomplete # For bash completion
import datetime
import requests

import database
import hours
import edit_codes
import hours_cli
import overview

CURRENT_VERSION = "v0.2"

#def main_oud():
#    parser = argparse.ArgumentParser(description="Log hours for work.")
#    parser.add_argument(
#        "action",
#        choices=["hours", "codes", "add-hours"],
#        help="What should I do?")
#    options = parser.parse_args()
#    print(options)

def loadConfig():
    basepath = os.path.dirname(os.path.realpath(__file__))
    configpath = os.path.join(basepath, 'config.ini')
    raw_config = configparser.ConfigParser()
    raw_config.read(configpath)
    config = {
        'general': {'check_update': raw_config['general'].getboolean('check_update')},
        'database': {'path': os.path.expanduser(raw_config['database']['path'])},
        'overview': {'labels': raw_config['overview']['labels'],
                     'labels_width': raw_config['overview']['labels_width']}}

    return config

def check_update():
    """Return true if an update is available."""
    try:
        r = requests.get("https://api.github.com/repos/TomWis97/urenlog/releases/latest")
        data = r.json()
        if data['tag_name'] != CURRENT_VERSION:
            return True
        else:
            return False
    except:
        print("oops")
        return False

def print_update():
    if check_update():
        # A new version is available.
        print("A new version is available. You're running {}.".format(CURRENT_VERSION))

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="cmd", help="sub-command help")
    subparsers.required = True

    parser_hours = subparsers.add_parser("hours", help="TUI interface for hour registration.")
    
    parser_codes = subparsers.add_parser("codes", help="TUI interface for editing codes")

    parser_overview = subparsers.add_parser("overview", help="TUI for an overview for the month.")
    parser_overview.add_argument("month", nargs='?', help="Month as number to show.", type=int, default=datetime.date.today().month)
    parser_overview.add_argument("year", nargs='?', help="Year as number to show.", type=int, default=datetime.date.today().year)

    parser_add_hours = subparsers.add_parser("add-hours", help="Add hours for today.")
    parser_add_hours.add_argument("code", help="(Part of) displayname to use.")
    parser_add_hours.add_argument("amount", help="Amount of hours.", type=float)
    parser_add_hours.add_argument("-c", "--comment", help="Comment", default="")

    parser_hourstoday = subparsers.add_parser("hours-today", help="Show hours written today")

    argcomplete.autocomplete(parser)
    data = parser.parse_args()

    config = loadConfig()

    if data.cmd == "hours":
        UrenApp = hours.HoursApplication()
        UrenApp.configure(config['database']['path'])
        UrenApp.run()
        if config['general']['check_update']:
            print_update()
    elif data.cmd == "codes":
        CodeApp = edit_codes.CodeApplication()
        CodeApp.configure(config['database']['path'])
        CodeApp.run()
        if config['general']['check_update']:
            print_update()
    elif data.cmd == "add-hours":
        HoursCLI = hours_cli.HoursCLI(config['database']['path'])
        try:
            #print("Code: {}, Amount: {}, Comment: {}".format(data.code, data.amount, data.comment))
            entryCode = HoursCLI.codeFuzzySearch(data.code)
            if not entryCode:
                print("No code has been found with {} in displayname.".format(data.code))
                sys.exit(1)
        except ValueError:
            print("Multiple codes have been found for this query.")
            sys.exit(1)
        entryCodeId = entryCode[4]
        HoursCLI.addHoursToday(entryCodeId, data.amount, data.comment)
        print("Hours written today:", HoursCLI.getHoursToday())
    elif data.cmd == "overview":
        OverviewApp = overview.OverviewApplication()
        OverviewApp.configure(config)
        try:
            OverviewApp.changeMonth(data.year, data.month)
        except ValueError as err:
            print("Error:", err)
            exit(1)
            return # A bit redundant...
        OverviewApp.run()
        if config['general']['check_update']:
          print_update()
    elif data.cmd == "hours-today":
        HoursCLI = hours_cli.HoursCLI(config['database']['path'])
        data = HoursCLI.getCategoriesToday()
        print(HoursCLI.renderTable(["Code", "Hours"], data, colsep=" ", total=HoursCLI.getHoursToday()), end="")

if __name__ == "__main__":
    main()

